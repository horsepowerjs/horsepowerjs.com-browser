extends /main

mixin item(title, text)
  a(name=`${title}`)
  h3(name=`${title}`)= title
  .pure-block
    p!= text
    if block
      pre
        block

mixin navItem(title)
  li: a(href=`#${title}`)&attributes(attributes)= title

mixin navGroup(title)
  li
    a()= title
      span
        i.far.fa-angle-right
    if block
      ul
        block

block content
  script(src="https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.7.5/beautify.js")
  .pure-section.white
    .pure-container
      .pure-row.pure-padding--0px
        .pure-nav.pure-nav--fixed.pure-col.pure-col--2
          ul
            +navGroup('Tutorial')
            +navGroup('Fundamentals')
              +navGroup('Messages')
                +navGroup('Components')
                  +navItem('ajaxResponse')
                  +navItem('childAdded')
                  +navItem('childChanged')
                  +navItem('childRemoved')
                  +navItem('clicked')
                  +navItem('created')
                  +navItem('doubleClicked')
                  +navItem('keydown')
                  +navItem('keyup')
                  +navItem('loop')
                  +navItem('static loop')
                  +navItem('modified')
                  +navItem('mouseHeldDown')
                  +navItem('removed')
                  +navItem('onBinding')
                  +navItem('onBinding*')
                  +navItem('onScope')
                  +navItem('onScope*')
                  +navItem('tick')
                  +navItem('updated')
                +navGroup('Templates')
                  +navItem('preRender')
                  +navItem('postRender')
              +navGroup('Components')
                +navGroup('DOM')
                  +navItem('Element')
                  +navGroup('Form')
                    +navItem('Button')
                    +navItem('Checkbox')
                    +navItem('Input')
                  +navItem('FormItem')
                  +navItem('Link')
                +navItem('Templates')(data-page="123")
                +navGroup('Web Sockets')
            +navGroup('Techniques')
        .pure-col.pure-col--10.doc
        //- .pure-col.pure-col--10
          h2 Messages
          p.pure-block Messages are the primary focus of Horsepower, they are what make your components do what they do.

          +item('ajaxResponse', 'Called when there is a response from an ajax request that was made by <code>this.ajax.get</code> or <code> this.ajax.post</code>')
            code.language-javascript.
              class example extends hp.element {
                created() {
                  this.ajax.get('/myfile.json')
                }
                ajaxResponse(data) {
                  console.log(data)
                }
              }

          +item('childAdded','Called when a child element gets added. The child may or not be a direct child of the element.')
            code.language-javascript.
              class example extends hp.element {
                childAdded(element) {
                  if(!hp.hasComponents(element)){
                    hp.createComponent(element, otherComponent)
                  }
                }

          +item('childChanged','Called when a children elements gets added/removed.')
            code.language-javascript.
              class example extends hp.element {
                childChanged(element) {

                }
              }

          +item('childRemoved','Called when a children elements get removed.')
            code.language-javascript.
              class example extends hp.element {
                childRemoved(element) {

                }
              }

          +item('clicked','Called when the element is clicked.')
            code.language-javascript.
              class example extends hp.element {
                clicked() {
                  this.toggleClass('red-background')
                }
              }

          +item('created','Called when the component gets created. This is only called once per component, and is a good place to initialize properties and/or scope values.')
            code.language-javascript.
              class example extends hp.element {
                created() {
                  this.number = Math.random()
                }
              }

          +item('doubleClicked','Called when the element was double clicked.')
            code.language-javascript.
              class example extends hp.element {
                doubleClicked() {
                  this.toggleClass('blue-background')
                }
              }

          +item('keydown','Called when the mouse button has been held down for 500ms.')
            code.language-javascript.
              class example extends hp.element {
                keydown(keyboard) {
                  keyboard.block(/d/)
                }
              }

          +item('keyup','Called when the mouse button has been held down for 500ms.')
            code.language-javascript.
              class example extends hp.element {
                keyup(keyboard) {
                  console.log(keyboard.key)
                }
              }

          +item('loop','Runs a loop until a number is not returned. The returned number is when the next loop call will be called in seconds.')
            code.language-javascript.
              class example extends hp.element {
                loop(keyboard) {
                  this.appendElement('div', 'Hello')
                  return 0.5
                }
              }

          +item('modified','Called when the element attributes have been modified.')
            code.language-javascript.
              class example extends hp.element {
                modified(newValue, oldValue, attribute) {
                  console.log(newValue, oldValue, attribute)
                }
              }

          +item('mouseHeldDown','Called when the mouse button has been held down for 500ms.')
            code.language-javascript.
              class example extends hp.element {
                mouseHeldDown(mouse) {
                  this.findElements('input[type=text]', item => this.value(''))
                }
              }

          +item('removed','Called when the component has been destoryed. This is also called when the element itself gets destroyed and the component is attached to it since the component gets destroyed along with the element.')
            code.language-javascript.
              class example extends hp.element {
                mouseHeldDown(mouse) {
                  this.findElements('input[type=text]', item => this.value(''))
                }
              }
