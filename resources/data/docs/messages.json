{
  "title": "Messages",
  "title-message": "Messages are the primary focus of Horsepower, they are what make your components do what they do.",
  "docs": [
    {
      "title": "ajaxResponse",
      "message": "Called when there is a response from an ajax request that was made by <code>this.ajax.get</code> or <code> this.ajax.post</code>",
      "js": "class example extends hp.element{created(){this.ajax.get('/myfile.json')}ajaxResponse(data){console.log(data)}}"
    },
    {
      "title": "childAdded",
      "message": "Called when a child element gets added. The child may or not be a direct child of the element.",
      "js": "class example extends hp.element{childAdded(element){if(!hp.hasComponents(element)){hp.createComponent(element, otherComponent)}}}"
    },
    {
      "title": "childChanged",
      "message": "Called when a children elements gets added/removed.",
      "js": "class example extends hp.element {childChanged(element) {}}"
    },
    {
      "title": "childRemoved",
      "message": "Called when a children elements get removed.",
      "js": "class example extends hp.element {childRemoved(element) {}}"
    },
    {
      "title": "clicked",
      "message": "Called when the element is clicked.",
      "js": "class example extends hp.element {clicked() {this.toggleClass('red-background')}}"
    },
    {
      "title": "created",
      "message": "Called when the component gets created. This is only called once per component, and is a good place to initialize properties and/or scope values.",
      "js": "class example extends hp.element {created() {this.number = Math.random()}}"
    },
    {
      "title": "doubleClicked",
      "message": "Called when the element was double clicked.",
      "js": "class example extends hp.element {doubleClicked() {this.toggleClass('blue-background')}}"
    },
    {
      "title": "keydown",
      "message": "Called when a keyboard key has been pressed",
      "js": "class example extends hp.element {keydown(keyboard) {keyboard.block(/d/)}}"
    },
    {
      "title": "keyup",
      "message": "Called when a keyboard key has been released",
      "js": "class example extends hp.element {keyup(keyboard) {console.log(keyboard.key)}}"
    },
    {
      "title": "loop",
      "message": "Runs a loop until a number is not returned. The returned number is when the next loop call will be called in seconds. The difference between <code>loop</code> and <code>static loop</code> is that <code>loop</code> is called on every component.",
      "js": "class example extends hp.element {loop(keyboard) {this.appendElement('div', 'Hello')\nreturn 0.5}}"
    },
    {
      "title": "static loop",
      "message": "Runs a loop until a number is not returned. The returned number is when the next loop call will be called in seconds. The difference between <code>loop</code> and <code>static loop</code> is that <code>static loop</code> is only called once per component type.",
      "js": "class example extends hp.element {loop(keyboard) {this.appendElement('div', 'Hello')\nreturn 0.5}}"
    },
    {
      "title": "modified",
      "message": "Called when the element attributes have been modified.",
      "js": "class example extends hp.element {modified(newValue, oldValue, attribute) {console.log(newValue, oldValue, attribute)}}"
    },
    {
      "title": "mouseHeldDown",
      "message": "Called when the mouse button has been held down for 500ms.",
      "js": "class example extends hp.element {mouseHeldDown(mouse) {this.findElements('input[type=text]', item => this.value(''))}}"
    },
    {
      "title": "removed",
      "message": "Called when the component has been destoryed. This is also called when the element itself gets destroyed and the component is attached to it since the component gets destroyed along with the element.",
      "js": "class example extends hp.element {mouseHeldDown(mouse) {this.findElements('input[type=text]', item => this.value(''))}}"
    }
  ]
}