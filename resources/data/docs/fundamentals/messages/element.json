{
  "title": "Element Messages",
  "title-message": "Element messages can happen on any compnent. They are not restricted to a specific type of element like the <code>websocket</code> for example in which <code>connected</code> is only avalible on a websocket.",
  "docs": [
    {
      "title": "ajaxResponse",
      "message": "Called when there is a response from an ajax request that was made by <code>this.ajax.get</code> or <code> this.ajax.post</code>",
      "js": "class example extends hp.element{created(){this.ajax.get('/myfile.json')}ajaxResponse(data){console.log(data)}}"
    },
    {
      "title": "childAdded",
      "message": "Called when a child element gets added. The child may or not be a direct child of the element.",
      "js": "class example extends hp.element{childAdded(element){if(!hp.hasComponents(element)){hp.createComponent(element, otherComponent)}}}"
    },
    {
      "title": "childChanged",
      "message": "Called when a children elements gets added/removed.",
      "js": "class example extends hp.element {childChanged(element) {}}"
    },
    {
      "title": "childRemoved",
      "message": "Called when a children elements get removed.",
      "js": "class example extends hp.element {childRemoved(element) {}}"
    },
    {
      "title": "clicked",
      "message": "Called when the element is clicked.",
      "js": "class example extends hp.element {clicked() {this.toggleClass('red-background')}}"
    },
    {
      "title": "created",
      "message": "Called when the component gets created. This is only called once per component, and is a good place to initialize properties and/or scope values.",
      "js": "class example extends hp.element {created() {this.number = Math.random()}}"
    },
    {
      "title": "doubleClicked",
      "message": "Called when the element was double clicked.",
      "js": "class example extends hp.element {doubleClicked() {this.toggleClass('blue-background')}}"
    },
    {
      "title": "keydown",
      "message": "Called when a keyboard key has been pressed",
      "js": "class example extends hp.element {keydown(keyboard) {keyboard.block(/d/)}}"
    },
    {
      "title": "keyup",
      "message": "Called when a keyboard key has been released",
      "js": "class example extends hp.element {keyup(keyboard) {console.log(keyboard.key)}}"
    },
    {
      "title": "modified",
      "message": "Called when the element attributes have been modified.",
      "js": "class example extends hp.element {modified(newValue, oldValue, attribute) {console.log(newValue, oldValue, attribute)}}"
    },
    {
      "title": "mouseHeldDown",
      "message": "Called when the mouse button has been held down for 500ms.",
      "js": "class example extends hp.element {mouseHeldDown(mouse) {this.findElements('input[type=text]', item => this.value(''))}}"
    },
    {
      "title": "removed",
      "message": "Called when the component has been destroyed. This is also called when the element itself gets destroyed and the component is attached to it since the component gets destroyed along with the element.",
      "js": "class example extends hp.element {mouseHeldDown(mouse) {this.findElements('input[type=text]', item => this.value(''))}}"
    },
    {
      "title": "onBinding",
      "message": "Called when a binding (<code>hp-bind</code> or <code>\\{\\{*\\}\\}</code>) is modified from one state to another state.",
      "js": "class example extends hp.element {onBinding(newVal, oldVal, prop) {console.log(newVal, oldVal, prop)}}"
    },
    {
      "title": "onBinding*",
      "message": "Called when a specific binding (<code>hp-bind</code> or <code>\\{\\{*\\}\\}</code>) is modified from one state to a new state where <code>*</code> is the name of the binding.<p><b>Note:</b> The first letter will be capitalized, and underscores will be removed and the following letter will be capitalized, so <code>hp-bind=\"super_man\"</code> will call the method <code>onBindingSuperMan</code></p>",
      "js": "class example extends hp.element {created(){this.scope.message='Hello World'}onBindingMessage(newVal, oldVal) {console.log(newVal, oldVal)}}"
    },
    {
      "title": "onScope",
      "message": "Called when a property on <code>scope</code> or <code>rootScope</code> is modified from one value to another value.",
      "js": "class example extends hp.element {onScope(newVal, oldVal, prop) {console.log(newVal, oldVal, prop)}}"
    },
    {
      "title": "onScope*",
      "message": "Called when a specific property on <code>scope</code> or <code>rootScope</code> is modified from one value to another value where <code>*</code> is the name of the property.<p><b>Note:</b> The first letter will be capitalized, and underscores will be removed and the following letter will be capitalized, so <code>this.scope.super_man=\"fight\"</code> will call the method <code>onScopeSuperMan</code></p><p><b>Note:</b> Modifying the scope within the same message may create an endless loop.</p>",
      "js": "class example extends hp.element {created(){this.scope.message='Hello World'}onScopeMessage(newVal, oldVal) {console.log(newVal, oldVal)}}"
    },
    {
      "title": "tick",
      "message": "Runs a tick until a number is not returned. The returned number is when the next tick call will be called in seconds. The difference between <code>tick</code> and <code>static tick</code> is that <code>tick</code> is called on every component.",
      "js": "class example extends hp.element {tick() {this.appendElement('div', 'Hello')\nreturn 0.5}}"
    },
    {
      "title": "static tick",
      "message": "Runs a tick until a number is not returned. The returned number is when the next tick call will be called in seconds. The difference between <code>tick</code> and <code>static tick</code> is that <code>static tick</code> is only called once per component type.",
      "js": "class example extends hp.element {static tick() {this.appendElement('div', 'Hello')\nreturn 0.5}}"
    }
  ]
}